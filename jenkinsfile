node {
        def OutputDirectory = "F:/DevOps_Resources/Deployment_Resources/MySQLMovies"
        
        def DatabaseJdbc = "jdbc:mysql://localhost:3306"

        def BuildSchema = "moviesci"        
        def AcceptanceSchema = "moviesacceptance"
        def ProdSchema = "movies"  
        def CheckSchema = 'moviescheck'

      
        def User = "root"
        def Password = "Redg@te1"

     
        stage ('Prep') 
        {
            echo "Ensure the pipeline is configured to clean the Jenkins workspace before checkout"
            //bat('set')
            deleteDir()
            checkout scm
        }
 
        stage ('Build') 
        {
            echo "DB Build"
        
            def status

            // Generate reports
            status = bat returnStatus: true, label: "Reports", script:" FLYWAY check -code -changes -drift -dryrun -url=${DatabaseJdbc}/${BuildSchema} -user=${User} -password=${Password} -check.buildUrl=${DatabaseJdbc}/${CheckSchema} -reportFilename=${OutputDirectory}/workspace/Build.html"
            echo "Status of Running CI build: $status"
            if (status != 0) { error('Running CI build failed') }
            archiveArtifacts allowEmptyArchive: true, artifacts: 'Build.html'

            // Clean the CI DB to get a fresh build
            status = bat returnStatus: true, label: "Clean", script:" FLYWAY clean info -url=${DatabaseJdbc}/${BuildSchema} -user=${User} -password=${Password} -cleanDisabled=false"
            echo "Status of Running CI build: $status"
            if (status != 0) { error('Running CI build failed') }
            
            // Migrate the CI db
            status = bat returnStatus: true, label: "Build", script:" FLYWAY migrate info -url=${DatabaseJdbc}/${BuildSchema} -user=${User} -password=${Password}"
            echo "Status of Running CI build: $status"
            if (status != 0) { error('Running CI build failed') }
         }
        
        stage ('Unit Tests')
        {
             echo "Running utPLSQL database Unit Tests"
            /*
            // status = bat returnStatus: true, label: "Unit Tests", script: "exec ut.Run();"
            echo "Status of utPLSQL database Unit Tests: $status"
            if (status != 0) { error('ERROR: Running Unit Tests failed') }
        
            status = junit allowEmptyResults: true, testResults: 'testResults.xml'
            echo "Failed JUnit tests: $status.failCount"
            archiveArtifacts allowEmptyArchive: true, artifacts: 'testResults.xml'
    
            zip zipFile: 'codeCoverage.zip', archive: true, glob: 'codeCoverage.html, codeCoverage.html_assets/*'
            archiveArtifacts allowEmptyArchive: true, artifacts: 'codeCoverage.zip', fingerprint: true
            */
        }
    
        stage ('Deploy to Acceptance')
        {
            echo "Deploying project to Acceptance Database"
                       
            status = bat returnStatus: true, label: "Acceptance Reports", script:" FLYWAY migrate -dryRunOutput=\"${OutputDirectory}/workspace/Acceptance.sql\" -url=${DatabaseJdbc} -user=${User} -password=${Password} -schemas=${AcceptanceSchema}"
            echo "Generating the dryrun script for Acceptance: $status"
            if (status != 0) { error('Generating Dryrun script for Acceptance failed') }
            
            status = bat returnStatus: true, label: "Acceptance Deployment", script:" FLYWAY migrate info -url=${DatabaseJdbc} -user=${User} -password=${Password} -schemas=${AcceptanceSchema}"
            echo "deploying to Acceptance: $status"
            if (status != 0) { error('Deployment to Acceptance failed') }
            
            archiveArtifacts allowEmptyArchive: true, artifacts: 'Acceptance.sql'
        }

        stage ('Approval Gate')
        {
            def message = "Approve release to Production?"
            // wrapping in a time out so it does not block the agent and simply fails the build if there is no user intervention.
            timeout(time: 30, unit: 'MINUTES')
                {
            def userInput = input(
                id: 'userInput',
                message: "$message",
                parameters:     [
                [$class: 'TextParameterDefinition', defaultValue: 'I Approve The Deployment', description: 'To Proceed, type I Approve The Deployment', name: 'Review deployment artifacts before proceeding']
                                ]
                    )
                    if (userInput.indexOf('I Approve The Deployment') == -1) {
                        currentBuild.result = 'ABORTED'
                        error('Deployment aborted')
                    }
                }
        }
     
        stage ('Deploy to Production') 
        {
            echo "Deploying to Production Database"
            
            // Create the dry run script
            status = bat returnStatus: true, label: "Production DryRun", script:" FLYWAY migrate -dryRunOutput=\"${OutputDirectory}/workspace/Production.sql\" -url=${DatabaseJdbc} -user=${User} -password=${Password} -schemas=${ProdSchema}"
            echo "Generating the dryrun script for Production: $status"
            if (status != 0) { error('Generating Dryrun script for Production failed') }
            archiveArtifacts allowEmptyArchive: true, artifacts: 'Production.sql'
            
            // Deploy to Production      
            status = bat returnStatus: true, label: "Production Deployment", script:" FLYWAY migrate info -url=${DatabaseJdbc} -user=${User} -password=${Password} -schemas=${ProdSchema}"
            echo "deploying to Production: $status"
            if (status != 0) { error('Deployment to Production failed') }
            
           
    
        }

    }